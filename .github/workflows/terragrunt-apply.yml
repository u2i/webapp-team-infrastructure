name: Terragrunt Apply with Slack Approval

on:
  push:
    branches: [main]
    paths:
      - 'environments/**'
      - 'modules/**'
      - 'terragrunt.hcl'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - qa
          - pre-prod
          - prod
      force_apply:
        description: 'Force apply without Slack approval (emergency only)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.6'
  TERRAGRUNT_VERSION: '0.54.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Detect changed environments
      id: detect
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use selected environment
          echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # Push to main - detect changed files
          CHANGED_ENVS=$(git diff --name-only HEAD~1...HEAD | \
            grep -E '^(environments/|modules/|terragrunt.hcl)' | \
            grep -E '^environments/' | \
            cut -d'/' -f2 | \
            sort -u | \
            jq -R -s -c 'split("\n")[:-1]')
          
          # If modules or root config changed, apply all environments
          if git diff --name-only HEAD~1...HEAD | grep -E '^(modules/|terragrunt.hcl)' > /dev/null; then
            echo "environments=[\"dev\",\"staging\",\"qa\",\"pre-prod\",\"prod\"]" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif [ "$CHANGED_ENVS" != "[]" ]; then
            echo "environments=$CHANGED_ENVS" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "environments=[]" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        fi

  slack-approval:
    name: Request Slack Approval
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.has_changes == 'true' &&
      contains(fromJson(needs.detect-changes.outputs.environments), 'prod') ||
      contains(fromJson(needs.detect-changes.outputs.environments), 'pre-prod')
    
    outputs:
      approved: ${{ steps.check-approval.outputs.approved }}
    
    steps:
    - name: Determine environments needing approval
      id: approval-envs
      run: |
        ENVS='${{ needs.detect-changes.outputs.environments }}'
        PROD_ENVS=$(echo $ENVS | jq -c '[.[] | select(. == "prod" or . == "pre-prod")]')
        echo "environments=$PROD_ENVS" >> $GITHUB_OUTPUT
    
    - name: Send Slack approval request
      if: github.event.inputs.force_apply != 'true'
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: ${{ vars.SLACK_INFRASTRUCTURE_CHANNEL }}
        payload: |
          {
            "text": "Production Infrastructure Change Approval Required",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*WebApp Team Infrastructure Change*\n\n:warning: Approval required for production environments"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Environments:*\n${{ steps.approval-envs.outputs.environments }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Actor:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Run ID:*\n${{ github.run_id }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ github.repository }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Approve"
                    },
                    "style": "primary",
                    "value": "approve:webapp-team-infrastructure:${{ github.run_id }}"
                  },
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Reject"
                    },
                    "style": "danger",
                    "value": "reject:webapp-team-infrastructure:${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    
    - name: Check approval status
      id: check-approval
      run: |
        if [ "${{ github.event.inputs.force_apply }}" == "true" ]; then
          echo "approved=true" >> $GITHUB_OUTPUT
        else
          echo "approved=pending" >> $GITHUB_OUTPUT
          echo "⏳ Waiting for Slack approval..."
          echo "The approval will trigger the terraform-apply-approved workflow"
        fi

  terragrunt-apply:
    name: Apply ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [detect-changes, slack-approval]
    if: |
      always() && 
      needs.detect-changes.outputs.has_changes == 'true' &&
      (github.event.inputs.force_apply == 'true' || 
       !contains(fromJson('["prod", "pre-prod"]'), matrix.environment))
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
        exclude:
          # Exclude prod/pre-prod unless force_apply
          - environment: ${{ github.event.inputs.force_apply != 'true' && 'prod' || 'never' }}
          - environment: ${{ github.event.inputs.force_apply != 'true' && 'pre-prod' || 'never' }}
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Setup Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
    
    - name: Determine project for environment
      id: project
      run: |
        if [[ "${{ matrix.environment }}" == "prod" || "${{ matrix.environment }}" == "pre-prod" ]]; then
          echo "project_id=u2i-tenant-webapp-prod" >> $GITHUB_OUTPUT
        else
          echo "project_id=u2i-tenant-webapp" >> $GITHUB_OUTPUT
        fi
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: terraform@${{ steps.project.outputs.project_id }}.iam.gserviceaccount.com
    
    - name: Terragrunt Apply
      working-directory: environments/${{ matrix.environment }}
      run: |
        echo "🚀 Applying ${{ matrix.environment }} environment..."
        terragrunt init
        terragrunt apply -auto-approve
        echo "✅ ${{ matrix.environment }} environment applied successfully"
    
    - name: Create audit log
      run: |
        gcloud logging write "webapp-team-infrastructure" \
          "{
            \"message\": \"TERRAGRUNT APPLY COMPLETED\",
            \"event_type\": \"terragrunt_apply_success\",
            \"environment\": \"${{ matrix.environment }}\",
            \"repository\": \"${{ github.repository }}\",
            \"actor\": \"${{ github.actor }}\",
            \"project\": \"${{ steps.project.outputs.project_id }}\",
            \"run_id\": \"${{ github.run_id }}\"
          }" \
          --severity=NOTICE \
          --project=${{ steps.project.outputs.project_id }}