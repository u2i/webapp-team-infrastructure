name: Terraform Apply with Slack Approval

on:
  push:
    branches: [main]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.hcl'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: '1.6.6'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  detect-changes:
    name: Detect Infrastructure Changes
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
      is_destructive: ${{ steps.plan.outputs.destructive }}
      change_summary: ${{ steps.plan.outputs.summary }}
      environment: ${{ steps.detect_env.outputs.environment }}
      needs_approval: ${{ steps.check_approval.outputs.needs_approval }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Detect environment
      id: detect_env
      run: |
        # Simple detection based on latest changed file
        # In real setup, might want to check all changed files
        if find . -name "*.tf" -o -name "*.hcl" | grep -q "prod"; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif find . -name "*.tf" -o -name "*.hcl" | grep -q "staging"; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/583426361694/locations/global/workloadIdentityPools/github-actions-pool/providers/github'
        service_account: 'github-actions@u2i-tenant-webapp.iam.gserviceaccount.com'
        token_format: 'access_token'
    
    - name: Set up gcloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Security and Compliance Checks
      run: |
        echo "üîí Running security and compliance checks..."
        
        # Check for hardcoded secrets
        if grep -rE "(password|secret|key)\s*=\s*\"[^\"]+\"" --include="*.tf" --include="*.tfvars" .; then
          echo "‚ùå Potential hardcoded secrets found!"
          exit 1
        fi
        
        # Validate compliance labels
        if ! grep -q "compliance.*iso27001\|soc2\|gdpr" *.tf; then
          echo "‚ö†Ô∏è Warning: No compliance framework labels found"
        fi
        
        # Check for EU data residency
        if grep -q "region.*us-" *.tf *.tfvars; then
          echo "‚ùå US regions detected - violates GDPR data residency requirements"
          exit 1
        fi
        
        echo "‚úÖ Security and compliance checks passed"
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Plan
      id: plan
      run: |
        echo "üìã Checking for infrastructure changes..."
        
        # Run terraform plan and capture exit code
        set +e
        terraform plan -detailed-exitcode -out=tfplan.out
        exit_code=$?
        set -e
        
        case $exit_code in
          0)
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "destructive=false" >> $GITHUB_OUTPUT
            echo "summary=No infrastructure changes detected" >> $GITHUB_OUTPUT
            ;;
          1)
            echo "‚ùå Terraform plan failed"
            exit 1
            ;;
          2)
            echo "Changes detected, analyzing..."
            
            # Check for destructive changes
            if terraform show -json tfplan.out | jq -e '.resource_changes[] | select(.change.actions[] == "delete")' > /dev/null; then
              echo "‚ö†Ô∏è Destructive changes detected!"
              echo "destructive=true" >> $GITHUB_OUTPUT
              SUMMARY="Destructive infrastructure changes detected"
            else
              echo "‚úÖ Non-destructive changes detected"
              echo "destructive=false" >> $GITHUB_OUTPUT
              SUMMARY="Infrastructure changes detected"
            fi
            
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
            
            # Save plan for apply
            echo "üì¶ Saving Terraform plan..."
            ;;
        esac
    
    - name: Check if approval needed
      id: check_approval
      run: |
        ENVIRONMENT="${{ steps.detect_env.outputs.environment }}"
        IS_DESTRUCTIVE="${{ steps.plan.outputs.destructive }}"
        
        echo "Environment: $ENVIRONMENT"
        echo "Destructive changes: $IS_DESTRUCTIVE"
        
        # Require approval for:
        # 1. Production environment
        # 2. Any destructive changes
        if [[ "$ENVIRONMENT" == "prod" ]] || [[ "$IS_DESTRUCTIVE" == "true" ]]; then
          echo "needs_approval=true" >> $GITHUB_OUTPUT
          echo "üîí Approval required for this deployment"
        else
          echo "needs_approval=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Auto-applying to $ENVIRONMENT environment"
        fi

  request-approval:
    name: Request Slack Approval
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true' && needs.detect-changes.outputs.needs_approval == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Send Slack approval request
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: 'infrastructure-approvals'
        payload: |
          {
            "text": "Infrastructure Change Approval Required",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*WebApp Team Infrastructure Change*\n\n:warning: Approval required for infrastructure changes"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn", 
                    "text": "*Actor:*\n${{ github.actor }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Run ID:*\n${{ github.run_id }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n${{ needs.detect-changes.outputs.environment }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Change Type:*\n${{ needs.detect-changes.outputs.change_summary }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Approve"
                    },
                    "style": "primary",
                    "value": "approve:webapp-team-infrastructure:${{ github.run_id }}"
                  },
                  {
                    "type": "button", 
                    "text": {
                      "type": "plain_text",
                      "text": "Reject"
                    },
                    "style": "danger",
                    "value": "reject:webapp-team-infrastructure:${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    
    - name: Wait for Slack approval
      id: wait_approval
      run: |
        echo "‚è≥ Waiting for Slack approval..."
        echo "This job will wait for approval via Slack interaction"
        echo "The approval will trigger a separate workflow"

  auto-apply:
    name: Auto-Apply Changes
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true' && needs.detect-changes.outputs.needs_approval == 'false'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/583426361694/locations/global/workloadIdentityPools/github-actions-pool/providers/github'
        service_account: 'github-actions@u2i-tenant-webapp.iam.gserviceaccount.com'
        token_format: 'access_token'
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Apply
      run: |
        echo "üöÄ Auto-applying to ${{ needs.detect-changes.outputs.environment }} environment"
        terraform apply -auto-approve
    
    - name: Send Slack notification
      if: always()
      uses: slackapi/slack-github-action@v1.26.0
      with:
        channel-id: 'infrastructure-notifications'
        payload: |
          {
            "text": "Infrastructure Auto-Applied",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Auto-Apply Complete*\n\n‚úÖ Changes automatically applied to `${{ needs.detect-changes.outputs.environment }}` environment"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:*\n${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Environment:*\n${{ needs.detect-changes.outputs.environment }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Status:*\n${{ job.status }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Run:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # For force apply (bypass approval)
  force-apply:
    name: Apply Infrastructure Changes (Force Apply Only)
    needs: detect-changes
    if: |
      always() && 
      needs.detect-changes.outputs.has_changes == 'true' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.force_apply == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Log force apply
      run: |
        echo "‚ö†Ô∏è FORCE APPLY INITIATED"
        echo "Actor: ${{ github.actor }}"
        echo "Reason: Emergency deployment"