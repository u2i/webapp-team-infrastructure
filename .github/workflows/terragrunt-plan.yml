name: Terragrunt Plan

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to plan'
        required: true
        type: choice
        options:
          - dev
          - staging
          - qa
          - pre-prod
          - prod

env:
  TF_VERSION: '1.6.6'
  TERRAGRUNT_VERSION: '0.54.0'
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changed environments
      id: detect
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          # Manual trigger - use selected environment
          echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
        else
          # PR - detect changed files
          CHANGED_ENVS=$(git diff --name-only origin/main...HEAD | \
            grep -E '^(environments/|modules/|terragrunt.hcl)' | \
            grep -E '^environments/' | \
            cut -d'/' -f2 | \
            sort -u | \
            jq -R -s -c 'split("\n")[:-1]')
          
          # If modules or root config changed, plan all environments
          if git diff --name-only origin/main...HEAD | grep -E '^(modules/|terragrunt.hcl)' > /dev/null; then
            echo "environments=[\"dev\",\"staging\",\"qa\",\"pre-prod\",\"prod\"]" >> $GITHUB_OUTPUT
          elif [ "$CHANGED_ENVS" != "[]" ]; then
            echo "environments=$CHANGED_ENVS" >> $GITHUB_OUTPUT
          else
            echo "environments=[]" >> $GITHUB_OUTPUT
          fi
        fi

  terragrunt-plan:
    name: Plan ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.environments != '[]'
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
    
    - name: Setup Terragrunt
      run: |
        wget -q https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
    
    - name: Determine project for environment
      id: project
      run: |
        if [[ "${{ matrix.environment }}" == "prod" || "${{ matrix.environment }}" == "pre-prod" ]]; then
          echo "project_id=u2i-tenant-webapp-prod" >> $GITHUB_OUTPUT
          echo "is_prod=true" >> $GITHUB_OUTPUT
        else
          echo "project_id=u2i-tenant-webapp" >> $GITHUB_OUTPUT
          echo "is_prod=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: terraform@${{ steps.project.outputs.project_id }}.iam.gserviceaccount.com
    
    - name: Terragrunt Init
      working-directory: environments/${{ matrix.environment }}
      run: terragrunt init
    
    - name: Terragrunt Plan
      id: plan
      working-directory: environments/${{ matrix.environment }}
      run: |
        echo "ðŸ“‹ Planning ${{ matrix.environment }} environment..."
        terragrunt plan -out=tfplan.out
        terragrunt show -no-color tfplan.out > tfplan.txt
        
        # Create summary
        SUMMARY=$(head -50 tfplan.txt)
        echo "summary<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Comment PR with plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan for \`${{ matrix.environment }}\` ðŸ“‹
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.summary }}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.name,
            body: output
          })